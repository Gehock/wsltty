--- a/src/wslbridge2.cpp	2020-10-18 15:03:06.000000000 +0000
+++ b/src/wslbridge2.cpp	2021-02-26 17:45:28.437040700 +0000
@@ -57,32 +57,85 @@ union IoSockets
 /* global variable */
 static union IoSockets g_ioSockets = { 0, 0, 0 };
 
+
+#define dont_debug_inband
+#define dont_use_controlsocket
+
 static void resize_window(int signum)
 {
+#ifdef use_controlsocket
+#warning this may crash for unknown reason, maybe terminate the backend
     struct winsize winp;
+    ioctl(STDIN_FILENO, TIOCGWINSZ, &winp);
 
     /* Send terminal window size to control socket */
-    ioctl(STDIN_FILENO, TIOCGWINSZ, &winp);
     send(g_ioSockets.controlSock, &winp, sizeof winp, 0);
+#else
+    static char wins[2 + sizeof(struct winsize)] = {0, 16};
+    static struct winsize * winsp = (struct winsize *)&wins[2];
+    ioctl(STDIN_FILENO, TIOCGWINSZ, winsp);
+
+#ifdef debug_inband
+    /* Send terminal window size inband, visualized as ESC sequence */
+    char resizesc[55];
+    //sprintf(resizesc, "\e_8;%u;%u\a", winsp->ws_row, winsp->ws_col);
+    sprintf(resizesc, "^[_8;%u;%u^G", winsp->ws_row, winsp->ws_col);
+    send(g_ioSockets.inputSock, resizesc, strlen(resizesc), 0);
+#else
+    /* Send terminal window size inband, with NUL escape */
+    send(g_ioSockets.inputSock, wins, sizeof wins, 0);
+#endif
+#endif
 }
 
 static void* send_buffer(void *param)
 {
     int ret;
     char data[1024];
-
-    struct pollfd fds = { STDIN_FILENO, POLLIN, 0 };
+    assert(sizeof data <= PIPE_BUF);
 
     while (1)
     {
+#ifdef use_poll
+        // we could poll on a single channel but we don't need to
+        static struct pollfd fds = { STDIN_FILENO, POLLIN, 0 };
         ret = poll(&fds, 1, -1);
 
         if (fds.revents & POLLIN)
+#else
+        if (1)
+#endif
         {
             ret = read(STDIN_FILENO, data, sizeof data);
-            if (ret > 0)
-                ret = send(g_ioSockets.inputSock, data, ret, 0);
-            else
+
+            char * s = data;
+            int len = ret;
+            while (ret > 0 && len > 0)
+            {
+                if (!*s)
+                {
+                    // send NUL STX
+#ifdef debug_inband
+                    ret = send(g_ioSockets.inputSock, (void*)"nul", 3, 0);
+#else
+                    static char NUL_STX[] = {0, 2};
+                    ret = send(g_ioSockets.inputSock, NUL_STX, 2, 0);
+#endif
+                    s++;
+                    len--;
+                }
+                else
+                {
+                    int n = strnlen(s, len);
+                    ret = send(g_ioSockets.inputSock, s, n, 0);
+                    if (ret > 0)
+                    {
+                        s += ret;
+                        len -= ret;
+                    }
+                }
+            }
+            if (ret <= 0)
                 break;
         }
     }
@@ -164,6 +217,7 @@ int main(int argc, char *argv[])
     if (GetWindowsBuild() < 17763)
         fatal("Windows 10 version is older than minimal requirement.\n");
 
+    setlocale(LC_ALL, "");
 #ifdef __CYGWIN__
     cygwin_internal(CW_SYNC_WINENV);
 #endif
@@ -529,13 +583,6 @@ int main(int argc, char *argv[])
         g_ioSockets.controlSock = AcceptLocSock(controlSocket);
     }
 
-    /* Create thread to send window size through control socket */
-    struct sigaction act = {};
-    act.sa_handler = resize_window;
-    act.sa_flags = SA_RESTART;
-    ret = sigaction(SIGWINCH, &act, NULL);
-    assert(ret == 0);
-
     /* Create thread to send input buffer to input socket */
     pthread_t tidInput;
     ret = pthread_create(&tidInput, nullptr, send_buffer, nullptr);
@@ -548,6 +595,17 @@ int main(int argc, char *argv[])
 
     termState.enterRawMode();
 
+    /* Create thread to send window size through control socket */
+    struct sigaction act = {};
+    act.sa_handler = resize_window;
+    act.sa_flags = SA_RESTART;
+    ret = sigaction(SIGWINCH, &act, NULL);
+    assert(ret == 0);
+
+    /* Notify initial size in case it's changed since starting */
+    //resize_window(0);
+    kill(getpid(), SIGWINCH);
+
     /*
      * wsltty#254: WORKAROUND: Terminates input thread forcefully
      * when output thread exits. Need some inter-thread syncing.
